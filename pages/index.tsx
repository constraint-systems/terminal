import type { NextPage } from "next";
import Head from "next/head";
import { useRef, useEffect } from "react";
import * as THREE from "three";
import { UseKeyboardPan } from "../components/KeyboardUtils";
import {
  UsePointerPan,
  UsePointerRay,
  UseWheelZoom,
} from "../components/PointerUtils";

const Home: NextPage = () => {
  const canvasRef = useRef<HTMLCanvasElement>(null);
  const cameraRef = useRef<THREE.Camera | null>(null);

  useEffect(() => {
    // set up three js scene
    const scene = new THREE.Scene();
    const camera = new THREE.PerspectiveCamera(
      75,
      window.innerWidth / window.innerHeight,
      0.1,
      1000
    );
    cameraRef.current = camera;

    const renderer = new THREE.WebGLRenderer({ canvas: canvasRef.current! });
    renderer.setSize(window.innerWidth, window.innerHeight);

    {
      const visibleHeight = 2 * Math.tan((camera.fov * Math.PI) / 360) * 5;
      const zoomPixel = visibleHeight / window.innerHeight;

      const canvas = document.createElement("canvas");
      canvas.width = 2048;
      canvas.height = 2048;
      const ctx = canvas.getContext("2d")!;
      ctx.fillStyle = "white";
      ctx.fillRect(0, 0, canvas.width, canvas.height);

      const canvasTexture = new THREE.CanvasTexture(canvas);

      const img = new Image();
      img.onload = () => {
        ctx.drawImage(img, 0, 0, ctx.canvas.width, ctx.canvas.height);
        canvasTexture.needsUpdate = true;
      };
      img.src = "/tekken.jpg";

      const geometry = new THREE.PlaneGeometry(
        (canvas.width * zoomPixel) / 4,
        (canvas.height * zoomPixel) / 4
      );
      const material = new THREE.MeshBasicMaterial({ map: canvasTexture });
      const mesh = new THREE.Mesh(geometry, material);
      scene.add(mesh);
    }

    camera.position.z = 5;

    // render
    function animate() {
      requestAnimationFrame(animate);
      renderer.render(scene, camera);
    }
    animate();
  }, []);

  UsePointerRay(canvasRef, cameraRef);
  UseWheelZoom(canvasRef, cameraRef);
  UseKeyboardPan(cameraRef);

  return (
    <div>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <canvas ref={canvasRef}></canvas>
    </div>
  );
};

export default Home;
